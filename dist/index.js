class A{constructor(A=0,Q=0,F=0){this.x=A,this.y=Q,this.z=F}equals(A){return this.x===A.x&&(this.y===A.y&&this.z===A.z)}add(Q){return"number"==typeof Q?new A(this.x+Q,this.y+Q,this.z+Q):new A(this.x+Q.x,this.y+Q.y,this.z+Q.z)}subtract(Q){return"number"==typeof Q?new A(this.x-Q,this.y-Q,this.z-Q):new A(this.x-Q.x,this.y-Q.y,this.z-Q.z)}multiply(Q){return"number"==typeof Q?new A(this.x*Q,this.y*Q,this.z*Q):Q instanceof A?new A(this.x*Q.x,this.y*Q.y,this.z*Q.z):new A(this.x*Q.buffer[0]+this.y*Q.buffer[4]+this.z*Q.buffer[8]+Q.buffer[12],this.x*Q.buffer[1]+this.y*Q.buffer[5]+this.z*Q.buffer[9]+Q.buffer[13],this.x*Q.buffer[2]+this.y*Q.buffer[6]+this.z*Q.buffer[10]+Q.buffer[14])}cross(Q){const F=this.y*Q.z-this.z*Q.y,U=this.z*Q.x-this.x*Q.z,B=this.x*Q.y-this.y*Q.x;return new A(F,U,B)}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z}lerp(Q,F){return new A(this.x+(Q.x-this.x)*F,this.y+(Q.y-this.y)*F,this.z+(Q.z-this.z)*F)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(A){return Math.sqrt((this.x-A.x)**2+(this.y-A.y)**2+(this.z-A.z)**2)}normalize(){const Q=this.magnitude();return new A(this.x/Q,this.y/Q,this.z/Q)}flat(){return[this.x,this.y,this.z]}clone(){return new A(this.x,this.y,this.z)}toString(){return`[${this.flat().join(", ")}]`}static One(Q=1){return new A(Q,Q,Q)}}class Q{constructor(A=0,Q=0,F=0,U=1){this.x=A,this.y=Q,this.z=F,this.w=U}equals(A){return this.x===A.x&&(this.y===A.y&&(this.z===A.z&&this.w===A.w))}normalize(){const A=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new Q(this.x/A,this.y/A,this.z/A,this.w/A)}multiply(A){const F=this.w,U=this.x,B=this.y,l=this.z,t=A.w,n=A.x,d=A.y,R=A.z;return new Q(F*n+U*t+B*R-l*d,F*d-U*R+B*t+l*n,F*R+U*d-B*n+l*t,F*t-U*n-B*d-l*R)}inverse(){const A=this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;return new Q(-this.x/A,-this.y/A,-this.z/A,this.w/A)}apply(F){const U=new Q(F.x,F.y,F.z,0),B=new Q(-this.x,-this.y,-this.z,this.w),l=this.multiply(U).multiply(B);return new A(l.x,l.y,l.z)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new Q(this.x,this.y,this.z,this.w)}static FromEuler(A){const F=A.x/2,U=A.y/2,B=A.z/2,l=Math.cos(U),t=Math.sin(U),n=Math.cos(F),d=Math.sin(F),R=Math.cos(B),I=Math.sin(B);return new Q(l*d*R+t*n*I,t*n*R-l*d*I,l*n*I-t*d*R,l*n*R+t*d*I)}toEuler(){const Q=2*(this.w*this.x+this.y*this.z),F=1-2*(this.x*this.x+this.y*this.y),U=Math.atan2(Q,F);let B;const l=2*(this.w*this.y-this.z*this.x);B=Math.abs(l)>=1?Math.sign(l)*Math.PI/2:Math.asin(l);const t=2*(this.w*this.z+this.x*this.y),n=1-2*(this.y*this.y+this.z*this.z),d=Math.atan2(t,n);return new A(U,B,d)}static FromMatrix3(A){const F=A.buffer,U=F[0]+F[4]+F[8];let B,l,t,n;if(U>0){const A=.5/Math.sqrt(U+1);n=.25/A,B=(F[7]-F[5])*A,l=(F[2]-F[6])*A,t=(F[3]-F[1])*A}else if(F[0]>F[4]&&F[0]>F[8]){const A=2*Math.sqrt(1+F[0]-F[4]-F[8]);n=(F[7]-F[5])/A,B=.25*A,l=(F[1]+F[3])/A,t=(F[2]+F[6])/A}else if(F[4]>F[8]){const A=2*Math.sqrt(1+F[4]-F[0]-F[8]);n=(F[2]-F[6])/A,B=(F[1]+F[3])/A,l=.25*A,t=(F[5]+F[7])/A}else{const A=2*Math.sqrt(1+F[8]-F[0]-F[4]);n=(F[3]-F[1])/A,B=(F[2]+F[6])/A,l=(F[5]+F[7])/A,t=.25*A}return new Q(B,l,t,n)}static FromAxisAngle(A,F){const U=F/2,B=Math.sin(U),l=Math.cos(U);return new Q(A.x*B,A.y*B,A.z*B,l)}toString(){return`[${this.flat().join(", ")}]`}}class F{constructor(){const A=new Map;this.addEventListener=(Q,F)=>{A.has(Q)||A.set(Q,new Set),A.get(Q).add(F)},this.removeEventListener=(Q,F)=>{A.has(Q)&&A.get(Q).delete(F)},this.hasEventListener=(Q,F)=>!!A.has(Q)&&A.get(Q).has(F),this.dispatchEvent=Q=>{if(A.has(Q.type))for(const F of A.get(Q.type))F(Q)}}}class U{constructor(A=1,Q=0,F=0,U=0,B=0,l=1,t=0,n=0,d=0,R=0,I=1,e=0,Z=0,V=0,a=0,g=1){this.buffer=[A,Q,F,U,B,l,t,n,d,R,I,e,Z,V,a,g]}equals(A){if(this.buffer.length!==A.buffer.length)return!1;if(this.buffer===A.buffer)return!0;for(let Q=0;Q<this.buffer.length;Q++)if(this.buffer[Q]!==A.buffer[Q])return!1;return!0}multiply(A){const Q=this.buffer,F=A.buffer;return new U(F[0]*Q[0]+F[1]*Q[4]+F[2]*Q[8]+F[3]*Q[12],F[0]*Q[1]+F[1]*Q[5]+F[2]*Q[9]+F[3]*Q[13],F[0]*Q[2]+F[1]*Q[6]+F[2]*Q[10]+F[3]*Q[14],F[0]*Q[3]+F[1]*Q[7]+F[2]*Q[11]+F[3]*Q[15],F[4]*Q[0]+F[5]*Q[4]+F[6]*Q[8]+F[7]*Q[12],F[4]*Q[1]+F[5]*Q[5]+F[6]*Q[9]+F[7]*Q[13],F[4]*Q[2]+F[5]*Q[6]+F[6]*Q[10]+F[7]*Q[14],F[4]*Q[3]+F[5]*Q[7]+F[6]*Q[11]+F[7]*Q[15],F[8]*Q[0]+F[9]*Q[4]+F[10]*Q[8]+F[11]*Q[12],F[8]*Q[1]+F[9]*Q[5]+F[10]*Q[9]+F[11]*Q[13],F[8]*Q[2]+F[9]*Q[6]+F[10]*Q[10]+F[11]*Q[14],F[8]*Q[3]+F[9]*Q[7]+F[10]*Q[11]+F[11]*Q[15],F[12]*Q[0]+F[13]*Q[4]+F[14]*Q[8]+F[15]*Q[12],F[12]*Q[1]+F[13]*Q[5]+F[14]*Q[9]+F[15]*Q[13],F[12]*Q[2]+F[13]*Q[6]+F[14]*Q[10]+F[15]*Q[14],F[12]*Q[3]+F[13]*Q[7]+F[14]*Q[11]+F[15]*Q[15])}clone(){const A=this.buffer;return new U(A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15])}determinant(){const A=this.buffer;return A[12]*A[9]*A[6]*A[3]-A[8]*A[13]*A[6]*A[3]-A[12]*A[5]*A[10]*A[3]+A[4]*A[13]*A[10]*A[3]+A[8]*A[5]*A[14]*A[3]-A[4]*A[9]*A[14]*A[3]-A[12]*A[9]*A[2]*A[7]+A[8]*A[13]*A[2]*A[7]+A[12]*A[1]*A[10]*A[7]-A[0]*A[13]*A[10]*A[7]-A[8]*A[1]*A[14]*A[7]+A[0]*A[9]*A[14]*A[7]+A[12]*A[5]*A[2]*A[11]-A[4]*A[13]*A[2]*A[11]-A[12]*A[1]*A[6]*A[11]+A[0]*A[13]*A[6]*A[11]+A[4]*A[1]*A[14]*A[11]-A[0]*A[5]*A[14]*A[11]-A[8]*A[5]*A[2]*A[15]+A[4]*A[9]*A[2]*A[15]+A[8]*A[1]*A[6]*A[15]-A[0]*A[9]*A[6]*A[15]-A[4]*A[1]*A[10]*A[15]+A[0]*A[5]*A[10]*A[15]}invert(){const A=this.buffer,Q=this.determinant();if(0===Q)throw new Error("Matrix is not invertible.");const F=1/Q;return new U(F*(A[5]*A[10]*A[15]-A[5]*A[11]*A[14]-A[9]*A[6]*A[15]+A[9]*A[7]*A[14]+A[13]*A[6]*A[11]-A[13]*A[7]*A[10]),F*(-A[1]*A[10]*A[15]+A[1]*A[11]*A[14]+A[9]*A[2]*A[15]-A[9]*A[3]*A[14]-A[13]*A[2]*A[11]+A[13]*A[3]*A[10]),F*(A[1]*A[6]*A[15]-A[1]*A[7]*A[14]-A[5]*A[2]*A[15]+A[5]*A[3]*A[14]+A[13]*A[2]*A[7]-A[13]*A[3]*A[6]),F*(-A[1]*A[6]*A[11]+A[1]*A[7]*A[10]+A[5]*A[2]*A[11]-A[5]*A[3]*A[10]-A[9]*A[2]*A[7]+A[9]*A[3]*A[6]),F*(-A[4]*A[10]*A[15]+A[4]*A[11]*A[14]+A[8]*A[6]*A[15]-A[8]*A[7]*A[14]-A[12]*A[6]*A[11]+A[12]*A[7]*A[10]),F*(A[0]*A[10]*A[15]-A[0]*A[11]*A[14]-A[8]*A[2]*A[15]+A[8]*A[3]*A[14]+A[12]*A[2]*A[11]-A[12]*A[3]*A[10]),F*(-A[0]*A[6]*A[15]+A[0]*A[7]*A[14]+A[4]*A[2]*A[15]-A[4]*A[3]*A[14]-A[12]*A[2]*A[7]+A[12]*A[3]*A[6]),F*(A[0]*A[6]*A[11]-A[0]*A[7]*A[10]-A[4]*A[2]*A[11]+A[4]*A[3]*A[10]+A[8]*A[2]*A[7]-A[8]*A[3]*A[6]),F*(A[4]*A[9]*A[15]-A[4]*A[11]*A[13]-A[8]*A[5]*A[15]+A[8]*A[7]*A[13]+A[12]*A[5]*A[11]-A[12]*A[7]*A[9]),F*(-A[0]*A[9]*A[15]+A[0]*A[11]*A[13]+A[8]*A[1]*A[15]-A[8]*A[3]*A[13]-A[12]*A[1]*A[11]+A[12]*A[3]*A[9]),F*(A[0]*A[5]*A[15]-A[0]*A[7]*A[13]-A[4]*A[1]*A[15]+A[4]*A[3]*A[13]+A[12]*A[1]*A[7]-A[12]*A[3]*A[5]),F*(-A[0]*A[5]*A[11]+A[0]*A[7]*A[9]+A[4]*A[1]*A[11]-A[4]*A[3]*A[9]-A[8]*A[1]*A[7]+A[8]*A[3]*A[5]),F*(-A[4]*A[9]*A[14]+A[4]*A[10]*A[13]+A[8]*A[5]*A[14]-A[8]*A[6]*A[13]-A[12]*A[5]*A[10]+A[12]*A[6]*A[9]),F*(A[0]*A[9]*A[14]-A[0]*A[10]*A[13]-A[8]*A[1]*A[14]+A[8]*A[2]*A[13]+A[12]*A[1]*A[10]-A[12]*A[2]*A[9]),F*(-A[0]*A[5]*A[14]+A[0]*A[6]*A[13]+A[4]*A[1]*A[14]-A[4]*A[2]*A[13]-A[12]*A[1]*A[6]+A[12]*A[2]*A[5]),F*(A[0]*A[5]*A[10]-A[0]*A[6]*A[9]-A[4]*A[1]*A[10]+A[4]*A[2]*A[9]+A[8]*A[1]*A[6]-A[8]*A[2]*A[5]))}static Compose(A,Q,F){const B=Q.x,l=Q.y,t=Q.z,n=Q.w,d=B+B,R=l+l,I=t+t,e=B*d,Z=B*R,V=B*I,a=l*R,g=l*I,i=t*I,C=n*d,c=n*R,W=n*I,s=F.x,h=F.y,o=F.z;return new U((1-(a+i))*s,(Z+W)*s,(V-c)*s,0,(Z-W)*h,(1-(e+i))*h,(g+C)*h,0,(V+c)*o,(g-C)*o,(1-(e+a))*o,0,A.x,A.y,A.z,1)}toString(){return`[${this.buffer.join(", ")}]`}}class B extends Event{constructor(A){super("objectAdded"),this.object=A}}class l extends Event{constructor(A){super("objectRemoved"),this.object=A}}class t extends Event{constructor(A){super("objectChanged"),this.object=A}}class n extends F{constructor(){super(),this.positionChanged=!1,this.rotationChanged=!1,this.scaleChanged=!1,this._position=new A,this._rotation=new Q,this._scale=new A(1,1,1),this._transform=new U,this._changeEvent=new t(this),this.update=()=>{},this.applyPosition=()=>{this.position=new A},this.applyRotation=()=>{this.rotation=new Q},this.applyScale=()=>{this.scale=new A(1,1,1)}}_updateMatrix(){this._transform=U.Compose(this._position,this._rotation,this._scale)}get position(){return this._position}set position(A){this._position.equals(A)||(this._position=A,this.positionChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(A){this._rotation.equals(A)||(this._rotation=A,this.rotationChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get scale(){return this._scale}set scale(A){this._scale.equals(A)||(this._scale=A,this.scaleChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get forward(){let Q=new A(0,0,1);return Q=this.rotation.apply(Q),Q}get transform(){return this._transform}}class d{constructor(A=1,Q=0,F=0,U=0,B=1,l=0,t=0,n=0,d=1){this.buffer=[A,Q,F,U,B,l,t,n,d]}equals(A){if(this.buffer.length!==A.buffer.length)return!1;if(this.buffer===A.buffer)return!0;for(let Q=0;Q<this.buffer.length;Q++)if(this.buffer[Q]!==A.buffer[Q])return!1;return!0}multiply(A){const Q=this.buffer,F=A.buffer;return new d(F[0]*Q[0]+F[3]*Q[1]+F[6]*Q[2],F[1]*Q[0]+F[4]*Q[1]+F[7]*Q[2],F[2]*Q[0]+F[5]*Q[1]+F[8]*Q[2],F[0]*Q[3]+F[3]*Q[4]+F[6]*Q[5],F[1]*Q[3]+F[4]*Q[4]+F[7]*Q[5],F[2]*Q[3]+F[5]*Q[4]+F[8]*Q[5],F[0]*Q[6]+F[3]*Q[7]+F[6]*Q[8],F[1]*Q[6]+F[4]*Q[7]+F[7]*Q[8],F[2]*Q[6]+F[5]*Q[7]+F[8]*Q[8])}clone(){const A=this.buffer;return new d(A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8])}static Eye(A=1){return new d(A,0,0,0,A,0,0,0,A)}static Diagonal(A){return new d(A.x,0,0,0,A.y,0,0,0,A.z)}static RotationFromQuaternion(A){return new d(1-2*A.y*A.y-2*A.z*A.z,2*A.x*A.y-2*A.z*A.w,2*A.x*A.z+2*A.y*A.w,2*A.x*A.y+2*A.z*A.w,1-2*A.x*A.x-2*A.z*A.z,2*A.y*A.z-2*A.x*A.w,2*A.x*A.z-2*A.y*A.w,2*A.y*A.z+2*A.x*A.w,1-2*A.x*A.x-2*A.y*A.y)}static RotationFromEuler(A){const Q=Math.cos(A.x),F=Math.sin(A.x),U=Math.cos(A.y),B=Math.sin(A.y),l=Math.cos(A.z),t=Math.sin(A.z);return new d(...[U*l+B*F*t,-U*t+B*F*l,B*Q,Q*t,Q*l,-F,-B*l+U*F*t,B*t+U*F*l,U*Q])}toString(){return`[${this.buffer.join(", ")}]`}}class R{constructor(A=0,F=null,U=null,B=null,l=null){this.changed=!1,this.detached=!1,this._vertexCount=A,this._positions=F||new Float32Array(0),this._rotations=U||new Float32Array(0),this._scales=B||new Float32Array(0),this._colors=l||new Uint8Array(0),this._selection=new Uint8Array(this.vertexCount),this.translate=A=>{for(let Q=0;Q<this.vertexCount;Q++)this.positions[3*Q+0]+=A.x,this.positions[3*Q+1]+=A.y,this.positions[3*Q+2]+=A.z;this.changed=!0},this.rotate=A=>{const F=d.RotationFromQuaternion(A).buffer;for(let U=0;U<this.vertexCount;U++){const B=this.positions[3*U+0],l=this.positions[3*U+1],t=this.positions[3*U+2];this.positions[3*U+0]=F[0]*B+F[1]*l+F[2]*t,this.positions[3*U+1]=F[3]*B+F[4]*l+F[5]*t,this.positions[3*U+2]=F[6]*B+F[7]*l+F[8]*t;const n=new Q(this.rotations[4*U+1],this.rotations[4*U+2],this.rotations[4*U+3],this.rotations[4*U+0]),d=A.multiply(n);this.rotations[4*U+1]=d.x,this.rotations[4*U+2]=d.y,this.rotations[4*U+3]=d.z,this.rotations[4*U+0]=d.w}this.changed=!0},this.scale=A=>{for(let Q=0;Q<this.vertexCount;Q++)this.positions[3*Q+0]*=A.x,this.positions[3*Q+1]*=A.y,this.positions[3*Q+2]*=A.z,this.scales[3*Q+0]*=A.x,this.scales[3*Q+1]*=A.y,this.scales[3*Q+2]*=A.z;this.changed=!0},this.serialize=()=>{const A=new Uint8Array(this.vertexCount*R.RowLength),Q=new Float32Array(A.buffer),F=new Uint8Array(A.buffer);for(let A=0;A<this.vertexCount;A++)Q[8*A+0]=this.positions[3*A+0],Q[8*A+1]=this.positions[3*A+1],Q[8*A+2]=this.positions[3*A+2],F[32*A+24+0]=this.colors[4*A+0],F[32*A+24+1]=this.colors[4*A+1],F[32*A+24+2]=this.colors[4*A+2],F[32*A+24+3]=this.colors[4*A+3],Q[8*A+3+0]=this.scales[3*A+0],Q[8*A+3+1]=this.scales[3*A+1],Q[8*A+3+2]=this.scales[3*A+2],F[32*A+28+0]=128*this.rotations[4*A+0]+128&255,F[32*A+28+1]=128*this.rotations[4*A+1]+128&255,F[32*A+28+2]=128*this.rotations[4*A+2]+128&255,F[32*A+28+3]=128*this.rotations[4*A+3]+128&255;return A},this.reattach=(A,Q,F,U,B)=>{console.assert(A.byteLength===3*this.vertexCount*4,`Expected ${3*this.vertexCount*4} bytes, got ${A.byteLength} bytes`),this._positions=new Float32Array(A),this._rotations=new Float32Array(Q),this._scales=new Float32Array(F),this._colors=new Uint8Array(U),this._selection=new Uint8Array(B),this.detached=!1}}static Deserialize(A){const Q=A.length/R.RowLength,F=new Float32Array(3*Q),U=new Float32Array(4*Q),B=new Float32Array(3*Q),l=new Uint8Array(4*Q),t=new Float32Array(A.buffer),n=new Uint8Array(A.buffer);for(let A=0;A<Q;A++)F[3*A+0]=t[8*A+0],F[3*A+1]=t[8*A+1],F[3*A+2]=t[8*A+2],U[4*A+0]=(n[32*A+28+0]-128)/128,U[4*A+1]=(n[32*A+28+1]-128)/128,U[4*A+2]=(n[32*A+28+2]-128)/128,U[4*A+3]=(n[32*A+28+3]-128)/128,B[3*A+0]=t[8*A+3+0],B[3*A+1]=t[8*A+3+1],B[3*A+2]=t[8*A+3+2],l[4*A+0]=n[32*A+24+0],l[4*A+1]=n[32*A+24+1],l[4*A+2]=n[32*A+24+2],l[4*A+3]=n[32*A+24+3];return new R(Q,F,U,B,l)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get colors(){return this._colors}get selection(){return this._selection}}R.RowLength=32;class I{static SplatToPLY(A,F){let U="ply\nformat binary_little_endian 1.0\n";U+=`element vertex ${F}\n`;const B=["x","y","z","nx","ny","nz","f_dc_0","f_dc_1","f_dc_2"];for(let A=0;A<45;A++)B.push(`f_rest_${A}`);B.push("opacity"),B.push("scale_0"),B.push("scale_1"),B.push("scale_2"),B.push("rot_0"),B.push("rot_1"),B.push("rot_2"),B.push("rot_3");for(const A of B)U+=`property float ${A}\n`;U+="end_header\n";const l=(new TextEncoder).encode(U),t=248,n=F*t,d=new DataView(new ArrayBuffer(l.length+n));new Uint8Array(d.buffer).set(l,0);const R=new Float32Array(A),I=new Uint8Array(A),e=l.length,Z=220,V=232;for(let A=0;A<F;A++){const F=R[8*A+0],U=R[8*A+1],B=R[8*A+2],l=(I[32*A+24+0]/255-.5)/this.SH_C0,n=(I[32*A+24+1]/255-.5)/this.SH_C0,a=(I[32*A+24+2]/255-.5)/this.SH_C0,g=I[32*A+24+3]/255,i=Math.log(g/(1-g)),C=Math.log(R[8*A+3+0]),c=Math.log(R[8*A+3+1]),W=Math.log(R[8*A+3+2]);let s=new Q((I[32*A+28+1]-128)/128,(I[32*A+28+2]-128)/128,(I[32*A+28+3]-128)/128,(I[32*A+28+0]-128)/128);s=s.normalize();const h=s.w,o=s.x,J=s.y,b=s.z;d.setFloat32(e+t*A+0,F,!0),d.setFloat32(e+t*A+4,U,!0),d.setFloat32(e+t*A+8,B,!0),d.setFloat32(e+t*A+24+0,l,!0),d.setFloat32(e+t*A+24+4,n,!0),d.setFloat32(e+t*A+24+8,a,!0),d.setFloat32(e+t*A+216,i,!0),d.setFloat32(e+t*A+Z+0,C,!0),d.setFloat32(e+t*A+Z+4,c,!0),d.setFloat32(e+t*A+Z+8,W,!0),d.setFloat32(e+t*A+V+0,h,!0),d.setFloat32(e+t*A+V+4,o,!0),d.setFloat32(e+t*A+V+8,J,!0),d.setFloat32(e+t*A+V+12,b,!0)}return d.buffer}}I.SH_C0=.28209479177387814;class e extends n{constructor(F=void 0){super(),this.selectedChanged=!1,this._selected=!1,this._data=F||new R,this.applyPosition=()=>{this.data.translate(this.position),this.position=new A},this.applyRotation=()=>{this.data.rotate(this.rotation),this.rotation=new Q},this.applyScale=()=>{this.data.scale(this.scale),this.scale=new A(1,1,1)}}saveToFile(A=null,Q=null){if(!document)return;if(Q){if("splat"!==Q&&"ply"!==Q)throw new Error("Invalid format. Must be 'splat' or 'ply'")}else Q="splat";if(!A){const F=new Date;A=`splat-${F.getFullYear()}-${F.getMonth()+1}-${F.getDate()}.${Q}`}this.applyRotation(),this.applyScale(),this.applyPosition();const F=this.data.serialize();let U;if("ply"===Q){const A=I.SplatToPLY(F.buffer,this.data.vertexCount);U=new Blob([A],{type:"application/octet-stream"})}else U=new Blob([F.buffer],{type:"application/octet-stream"});const B=document.createElement("a");B.download=A,B.href=URL.createObjectURL(U),B.click()}get data(){return this._data}get selected(){return this._selected}set selected(A){this._selected!==A&&(this._selected=A,this.selectedChanged=!0,this.dispatchEvent(this._changeEvent))}}class Z{constructor(){this._fx=1132,this._fy=1132,this._near=.1,this._far=100,this._width=512,this._height=512,this._projectionMatrix=new U,this._viewMatrix=new U,this._viewProj=new U,this._updateProjectionMatrix=()=>{this._projectionMatrix=new U(2*this.fx/this.width,0,0,0,0,-2*this.fy/this.height,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.update=(A,Q)=>{const F=d.RotationFromQuaternion(Q).buffer,B=A.flat();this._viewMatrix=new U(F[0],F[1],F[2],0,F[3],F[4],F[5],0,F[6],F[7],F[8],0,-B[0]*F[0]-B[1]*F[3]-B[2]*F[6],-B[0]*F[1]-B[1]*F[4]-B[2]*F[7],-B[0]*F[2]-B[1]*F[5]-B[2]*F[8],1),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.setSize=(A,Q)=>{this._width=A,this._height=Q,this._updateProjectionMatrix()}}get fx(){return this._fx}set fx(A){this._fx!==A&&(this._fx=A,this._updateProjectionMatrix())}get fy(){return this._fy}set fy(A){this._fy!==A&&(this._fy=A,this._updateProjectionMatrix())}get near(){return this._near}set near(A){this._near!==A&&(this._near=A,this._updateProjectionMatrix())}get far(){return this._far}set far(A){this._far!==A&&(this._far=A,this._updateProjectionMatrix())}get width(){return this._width}get height(){return this._height}get projectionMatrix(){return this._projectionMatrix}get viewMatrix(){return this._viewMatrix}get viewProj(){return this._viewProj}}class V{constructor(A=0,Q=0,F=0,U=0){this.x=A,this.y=Q,this.z=F,this.w=U}equals(A){return this.x===A.x&&(this.y===A.y&&(this.z===A.z&&this.w===A.w))}add(A){return"number"==typeof A?new V(this.x+A,this.y+A,this.z+A,this.w+A):new V(this.x+A.x,this.y+A.y,this.z+A.z,this.w+A.w)}subtract(A){return"number"==typeof A?new V(this.x-A,this.y-A,this.z-A,this.w-A):new V(this.x-A.x,this.y-A.y,this.z-A.z,this.w-A.w)}multiply(A){return"number"==typeof A?new V(this.x*A,this.y*A,this.z*A,this.w*A):A instanceof V?new V(this.x*A.x,this.y*A.y,this.z*A.z,this.w*A.w):new V(this.x*A.buffer[0]+this.y*A.buffer[4]+this.z*A.buffer[8]+this.w*A.buffer[12],this.x*A.buffer[1]+this.y*A.buffer[5]+this.z*A.buffer[9]+this.w*A.buffer[13],this.x*A.buffer[2]+this.y*A.buffer[6]+this.z*A.buffer[10]+this.w*A.buffer[14],this.x*A.buffer[3]+this.y*A.buffer[7]+this.z*A.buffer[11]+this.w*A.buffer[15])}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z+this.w*A.w}lerp(A,Q){return new V(this.x+(A.x-this.x)*Q,this.y+(A.y-this.y)*Q,this.z+(A.z-this.z)*Q,this.w+(A.w-this.w)*Q)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}distanceTo(A){return Math.sqrt((this.x-A.x)**2+(this.y-A.y)**2+(this.z-A.z)**2+(this.w-A.w)**2)}normalize(){const A=this.magnitude();return new V(this.x/A,this.y/A,this.z/A,this.w/A)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new V(this.x,this.y,this.z,this.w)}toString(){return`[${this.flat().join(", ")}]`}}class a extends n{constructor(Q=void 0){super(),this._data=Q||new Z,this._position=new A(0,0,-5),this.update=()=>{this.data.update(this.position,this.rotation)},this.screenPointToRay=(Q,F)=>{const U=new V(Q,F,-1,1),B=this._data.projectionMatrix.invert(),l=U.multiply(B),t=this._data.viewMatrix.invert(),n=l.multiply(t);return new A(n.x/n.w,n.y/n.w,n.z/n.w).subtract(this.position).normalize()}}get data(){return this._data}}class g extends F{constructor(){super(),this._objects=[],this.addObject=A=>{this.objects.push(A),this.dispatchEvent(new B(A))},this.removeObject=A=>{const Q=this.objects.indexOf(A);if(Q<0)throw new Error("Object not found in scene");this.objects.splice(Q,1),this.dispatchEvent(new l(A))},this.findObject=A=>{for(const Q of this.objects)if(A(Q))return Q},this.findObjectOfType=A=>{for(const Q of this.objects)if(Q instanceof A)return Q},this.reset=()=>{const A=this.objects.slice();for(const Q of A)this.removeObject(Q)},this.reset()}saveToFile(A=null,Q=null){if(!document)return;if(Q){if("splat"!==Q&&"ply"!==Q)throw new Error("Invalid format. Must be 'splat' or 'ply'")}else Q="splat";if(!A){const F=new Date;A=`scene-${F.getFullYear()}-${F.getMonth()+1}-${F.getDate()}.${Q}`}const F=[];let U=0;for(const A of this.objects)if(A.applyRotation(),A.applyScale(),A.applyPosition(),A instanceof e){const Q=A.data.serialize();F.push(Q),U+=A.data.vertexCount}const B=new Uint8Array(U*R.RowLength);let l,t=0;for(const A of F)B.set(A,t),t+=A.length;if("ply"===Q){const A=I.SplatToPLY(B.buffer,U);l=new Blob([A],{type:"application/octet-stream"})}else l=new Blob([B.buffer],{type:"application/octet-stream"});const n=document.createElement("a");n.download=A,n.href=URL.createObjectURL(l),n.click()}get objects(){return this._objects}}async function i(A,Q){const F=await fetch(A,{mode:"cors",credentials:"omit",cache:Q?"force-cache":"default"});if(200!=F.status)throw new Error(F.status+" Unable to load "+F.url);return F}async function C(A,Q){return A.headers.has("content-length")?async function(A,Q){const F=A.body.getReader(),U=parseInt(A.headers.get("content-length")),B=new Uint8Array(U);let l=0;for(;;){const{done:A,value:t}=await F.read();if(A)break;B.set(t,l),l+=t.length,null==Q||Q(l/U)}return B}(A,Q):async function(A,Q){const F=A.body.getReader(),U=[];let B=0;for(;;){const{done:A,value:Q}=await F.read();if(A)break;U.push(Q),B+=Q.length}const l=new Uint8Array(B);let t=0;for(const A of U)l.set(A,t),t+=A.length,null==Q||Q(t/B);return l}(A,Q)}class c{static async LoadAsync(A,Q,F,U=!1){const B=await i(A,U),l=await C(B,F),t=R.Deserialize(l),n=new e(t);return Q.addObject(n),n}static async LoadFromFileAsync(A,Q,F){const U=new FileReader;let B=new e;return U.onload=A=>{const F=new Uint8Array(A.target.result),U=R.Deserialize(F);B=new e(U),Q.addObject(B)},U.onprogress=A=>{null==F||F(A.loaded/A.total)},U.readAsArrayBuffer(A),await new Promise((A=>{U.onloadend=()=>{A()}})),B}}class W{static async LoadAsync(A,Q,F,U="",B=!1){const l=await i(A,B),t=await C(l,F);if(112!==t[0]||108!==t[1]||121!==t[2]||10!==t[3])throw new Error("Invalid PLY file");const n=new Uint8Array(this._ParsePLYBuffer(t.buffer,U)),d=R.Deserialize(n),I=new e(d);return Q.addObject(I),I}static async LoadFromFileAsync(A,Q,F,U=""){const B=new FileReader;let l=new e;return B.onload=A=>{const F=new Uint8Array(this._ParsePLYBuffer(A.target.result,U)),B=R.Deserialize(F);l=new e(B),Q.addObject(l)},B.onprogress=A=>{null==F||F(A.loaded/A.total)},B.readAsArrayBuffer(A),await new Promise((A=>{B.onloadend=()=>{A()}})),l}static _ParsePLYBuffer(F,U){const B=new Uint8Array(F),l=(new TextDecoder).decode(B.slice(0,10240)),t="end_header\n",n=l.indexOf(t);if(n<0)throw new Error("Unable to read .ply file header");const d=parseInt(/element vertex (\d+)\n/.exec(l)[1]);let e=0;const Z={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1},V=[];for(const A of l.slice(0,n).split("\n").filter((A=>A.startsWith("property ")))){const[Q,F,U]=A.split(" ");if(V.push({name:U,type:F,offset:e}),!Z[F])throw new Error(`Unsupported property type: ${F}`);e+=Z[F]}const a=new DataView(F,n+11),g=new ArrayBuffer(R.RowLength*d),i=Q.FromEuler(new A(Math.PI/2,0,0));for(let A=0;A<d;A++){const F=new Float32Array(g,A*R.RowLength,3),B=new Float32Array(g,A*R.RowLength+12,3),l=new Uint8ClampedArray(g,A*R.RowLength+24,4),t=new Uint8ClampedArray(g,A*R.RowLength+28,4);let n=255,d=0,Z=0,C=0;V.forEach((Q=>{let U;switch(Q.type){case"float":U=a.getFloat32(Q.offset+A*e,!0);break;case"int":U=a.getInt32(Q.offset+A*e,!0);break;default:throw new Error(`Unsupported property type: ${Q.type}`)}switch(Q.name){case"x":F[0]=U;break;case"y":F[1]=U;break;case"z":F[2]=U;break;case"scale_0":B[0]=Math.exp(U);break;case"scale_1":B[1]=Math.exp(U);break;case"scale_2":B[2]=Math.exp(U);break;case"red":l[0]=U;break;case"green":l[1]=U;break;case"blue":l[2]=U;break;case"f_dc_0":l[0]=255*(.5+I.SH_C0*U);break;case"f_dc_1":l[1]=255*(.5+I.SH_C0*U);break;case"f_dc_2":l[2]=255*(.5+I.SH_C0*U);break;case"f_dc_3":l[3]=255*(.5+I.SH_C0*U);break;case"opacity":l[3]=1/(1+Math.exp(-U))*255;break;case"rot_0":n=U;break;case"rot_1":d=U;break;case"rot_2":Z=U;break;case"rot_3":C=U}}));let c=new Q(d,Z,C,n);switch(U){case"polycam":{const A=F[1];F[1]=-F[2],F[2]=A,c=i.multiply(c);break}case"":break;default:throw new Error(`Unsupported format: ${U}`)}c=c.normalize(),t[0]=128*c.w+128,t[1]=128*c.x+128,t[2]=128*c.y+128,t[3]=128*c.z+128}return g}}function s(A,Q,F){var U=void 0===Q?null:Q,B=function(A,Q){var F=atob(A);if(Q){for(var U=new Uint8Array(F.length),B=0,l=F.length;B<l;++B)U[B]=F.charCodeAt(B);return String.fromCharCode.apply(null,new Uint16Array(U.buffer))}return F}(A,void 0!==F&&F),l=B.indexOf("\n",10)+1,t=B.substring(l)+(U?"//# sourceMappingURL="+U:""),n=new Blob([t],{type:"application/javascript"});return URL.createObjectURL(n)}function h(A,Q,F){var U;return function(B){return U=U||s(A,Q,F),new Worker(U,B)}}var o=h("",null,!1);class J{constructor(A,Q){this._scene=null,this._camera=null,this._started=!1,this._initialized=!1,this._renderer=A;const F=A.gl;this._program=F.createProgram(),this._passes=Q||[];const U=F.createShader(F.VERTEX_SHADER);F.shaderSource(U,this._getVertexSource()),F.compileShader(U),F.getShaderParameter(U,F.COMPILE_STATUS)||console.error(F.getShaderInfoLog(U));const B=F.createShader(F.FRAGMENT_SHADER);F.shaderSource(B,this._getFragmentSource()),F.compileShader(B),F.getShaderParameter(B,F.COMPILE_STATUS)||console.error(F.getShaderInfoLog(B)),F.attachShader(this.program,U),F.attachShader(this.program,B),F.linkProgram(this.program),F.getProgramParameter(this.program,F.LINK_STATUS)||console.error(F.getProgramInfoLog(this.program)),this.resize=()=>{F.useProgram(this._program),this._resize()},this.initialize=()=>{console.assert(!this._initialized,"ShaderProgram already initialized"),F.useProgram(this._program),this._initialize();for(const A of this.passes)A.initialize(this);this._initialized=!0,this._started=!0},this.render=(A,Q)=>{F.useProgram(this._program),this._scene===A&&this._camera===Q||(this.dispose(),this._scene=A,this._camera=Q,this.initialize());for(const A of this.passes)A.render();this._render()},this.dispose=()=>{if(this._initialized){F.useProgram(this._program);for(const A of this.passes)A.dispose();this._dispose(),this._scene=null,this._camera=null,this._initialized=!1}}}get renderer(){return this._renderer}get scene(){return this._scene}get camera(){return this._camera}get program(){return this._program}get passes(){return this._passes}get started(){return this._started}}var b=h("",null,!1),r=function(A={}){var Q,F,U=A;U.ready=new Promise(((A,U)=>{Q=A,F=U}));var B,l=Object.assign({},U),t="";t=(t=self.location.href).startsWith("blob:")?"":t.substr(0,t.replace(/[?#].*/,"").lastIndexOf("/")+1),B=A=>{var Q=new XMLHttpRequest;return Q.open("GET",A,!1),Q.responseType="arraybuffer",Q.send(null),new Uint8Array(Q.response)},U.print||console.log.bind(console);var n,d,R=U.printErr||console.error.bind(console);function I(A){if(y(A))return function(A){for(var Q=atob(A),F=new Uint8Array(Q.length),U=0;U<Q.length;++U)F[U]=Q.charCodeAt(U);return F}(A.slice(G.length))}Object.assign(U,l),l=null,U.arguments&&U.arguments,U.thisProgram&&U.thisProgram,U.quit&&U.quit,U.wasmBinary&&(n=U.wasmBinary),"object"!=typeof WebAssembly&&E("no native wasm support detected");var e,Z,V,a,g,i,C,c,W=!1;function s(){var A=d.buffer;U.HEAP8=e=new Int8Array(A),U.HEAP16=V=new Int16Array(A),U.HEAPU8=Z=new Uint8Array(A),U.HEAPU16=a=new Uint16Array(A),U.HEAP32=g=new Int32Array(A),U.HEAPU32=i=new Uint32Array(A),U.HEAPF32=C=new Float32Array(A),U.HEAPF64=c=new Float64Array(A)}var h=[],o=[],J=[],b=0,r=null;function E(A){U.onAbort?.(A),R(A="Aborted("+A+")"),W=!0,A+=". Build with -sASSERTIONS for more info.";var Q=new WebAssembly.RuntimeError(A);throw F(Q),Q}var m,N,G="data:application/octet-stream;base64,",y=A=>A.startsWith(G);function X(A){return Promise.resolve().then((()=>function(A){if(A==m&&n)return new Uint8Array(n);var Q=I(A);if(Q)return Q;if(B)return B(A);throw"both async and sync fetching of the wasm failed"}(A)))}function S(A,Q,F,U){return function(A,Q,F){return X(A).then((A=>WebAssembly.instantiate(A,Q))).then(F,(A=>{R(`failed to asynchronously prepare wasm: ${A}`),E(A)}))}(Q,F,U)}y(m="data:application/octet-stream;base64,")||(N=m,m=U.locateFile?U.locateFile(N,t):t+N);var Y=A=>{for(;A.length>0;)A.shift()(U)};U.noExitRuntime;var p,k,u=A=>{for(var Q="",F=A;Z[F];)Q+=p[Z[F++]];return Q},T={},D={},H=A=>{throw new k(A)};function w(A,Q,F={}){if(!("argPackAdvance"in Q))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(A,Q,F={}){var U=Q.name;if(A||H(`type "${U}" must have a positive integer typeid pointer`),D.hasOwnProperty(A)){if(F.ignoreDuplicateRegistrations)return;H(`Cannot register type '${U}' twice`)}if(D[A]=Q,T.hasOwnProperty(A)){var B=T[A];delete T[A],B.forEach((A=>A()))}}(A,Q,F)}var f=[],x=[],M=()=>x.length/2-5-f.length,v=A=>(A||H("Cannot use deleted val. handle = "+A),x[A]),z=A=>{switch(A){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:{const Q=f.pop()||x.length;return x[Q]=A,x[Q+1]=1,Q}}};function K(A){return this.fromWireType(i[A>>2])}var j={name:"emscripten::val",fromWireType:A=>{var Q=v(A);return(A=>{A>9&&0==--x[A+1]&&(x[A]=void 0,f.push(A))})(A),Q},toWireType:(A,Q)=>z(Q),argPackAdvance:8,readValueFromPointer:K,destructorFunction:null},O=(A,Q)=>{switch(Q){case 4:return function(A){return this.fromWireType(C[A>>2])};case 8:return function(A){return this.fromWireType(c[A>>3])};default:throw new TypeError(`invalid float width (${Q}): ${A}`)}},L=(A,Q,F)=>{switch(Q){case 1:return F?A=>e[A]:A=>Z[A];case 2:return F?A=>V[A>>1]:A=>a[A>>1];case 4:return F?A=>g[A>>2]:A=>i[A>>2];default:throw new TypeError(`invalid integer width (${Q}): ${A}`)}},P="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,_=(A,Q)=>A?((A,Q,F)=>{for(var U=Q+F,B=Q;A[B]&&!(B>=U);)++B;if(B-Q>16&&A.buffer&&P)return P.decode(A.subarray(Q,B));for(var l="";Q<B;){var t=A[Q++];if(128&t){var n=63&A[Q++];if(192!=(224&t)){var d=63&A[Q++];if((t=224==(240&t)?(15&t)<<12|n<<6|d:(7&t)<<18|n<<12|d<<6|63&A[Q++])<65536)l+=String.fromCharCode(t);else{var R=t-65536;l+=String.fromCharCode(55296|R>>10,56320|1023&R)}}else l+=String.fromCharCode((31&t)<<6|n)}else l+=String.fromCharCode(t)}return l})(Z,A,Q):"",q="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,$=(A,Q)=>{for(var F=A,U=F>>1,B=U+Q/2;!(U>=B)&&a[U];)++U;if((F=U<<1)-A>32&&q)return q.decode(Z.subarray(A,F));for(var l="",t=0;!(t>=Q/2);++t){var n=V[A+2*t>>1];if(0==n)break;l+=String.fromCharCode(n)}return l},AA=(A,Q,F)=>{if(F??=2147483647,F<2)return 0;for(var U=Q,B=(F-=2)<2*A.length?F/2:A.length,l=0;l<B;++l){var t=A.charCodeAt(l);V[Q>>1]=t,Q+=2}return V[Q>>1]=0,Q-U},QA=A=>2*A.length,FA=(A,Q)=>{for(var F=0,U="";!(F>=Q/4);){var B=g[A+4*F>>2];if(0==B)break;if(++F,B>=65536){var l=B-65536;U+=String.fromCharCode(55296|l>>10,56320|1023&l)}else U+=String.fromCharCode(B)}return U},UA=(A,Q,F)=>{if(F??=2147483647,F<4)return 0;for(var U=Q,B=U+F-4,l=0;l<A.length;++l){var t=A.charCodeAt(l);if(t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&A.charCodeAt(++l)),g[Q>>2]=t,(Q+=4)+4>B)break}return g[Q>>2]=0,Q-U},BA=A=>{for(var Q=0,F=0;F<A.length;++F){var U=A.charCodeAt(F);U>=55296&&U<=57343&&++F,Q+=4}return Q},lA=A=>{var Q=(A-d.buffer.byteLength+65535)/65536;try{return d.grow(Q),s(),1}catch(A){}};(()=>{for(var A=new Array(256),Q=0;Q<256;++Q)A[Q]=String.fromCharCode(Q);p=A})(),k=U.BindingError=class extends Error{constructor(A){super(A),this.name="BindingError"}},U.InternalError=class extends Error{constructor(A){super(A),this.name="InternalError"}},x.push(0,1,void 0,1,null,1,!0,1,!1,1),U.count_emval_handles=M;var tA={f:(A,Q,F,U,B)=>{},i:(A,Q,F,U)=>{w(A,{name:Q=u(Q),fromWireType:function(A){return!!A},toWireType:function(A,Q){return Q?F:U},argPackAdvance:8,readValueFromPointer:function(A){return this.fromWireType(Z[A])},destructorFunction:null})},h:A=>w(A,j),e:(A,Q,F)=>{w(A,{name:Q=u(Q),fromWireType:A=>A,toWireType:(A,Q)=>Q,argPackAdvance:8,readValueFromPointer:O(Q,F),destructorFunction:null})},b:(A,Q,F,U,B)=>{Q=u(Q);var l=A=>A;if(0===U){var t=32-8*F;l=A=>A<<t>>>t}var n=Q.includes("unsigned");w(A,{name:Q,fromWireType:l,toWireType:n?function(A,Q){return this.name,Q>>>0}:function(A,Q){return this.name,Q},argPackAdvance:8,readValueFromPointer:L(Q,F,0!==U),destructorFunction:null})},a:(A,Q,F)=>{var U=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][Q];function B(A){var Q=i[A>>2],F=i[A+4>>2];return new U(e.buffer,F,Q)}w(A,{name:F=u(F),fromWireType:B,argPackAdvance:8,readValueFromPointer:B},{ignoreDuplicateRegistrations:!0})},d:(A,Q)=>{var F="std::string"===(Q=u(Q));w(A,{name:Q,fromWireType(A){var Q,U=i[A>>2],B=A+4;if(F)for(var l=B,t=0;t<=U;++t){var n=B+t;if(t==U||0==Z[n]){var d=_(l,n-l);void 0===Q?Q=d:(Q+=String.fromCharCode(0),Q+=d),l=n+1}}else{var R=new Array(U);for(t=0;t<U;++t)R[t]=String.fromCharCode(Z[B+t]);Q=R.join("")}return IA(A),Q},toWireType(A,Q){var U;Q instanceof ArrayBuffer&&(Q=new Uint8Array(Q));var B="string"==typeof Q;B||Q instanceof Uint8Array||Q instanceof Uint8ClampedArray||Q instanceof Int8Array||H("Cannot pass non-string to std::string"),U=F&&B?(A=>{for(var Q=0,F=0;F<A.length;++F){var U=A.charCodeAt(F);U<=127?Q++:U<=2047?Q+=2:U>=55296&&U<=57343?(Q+=4,++F):Q+=3}return Q})(Q):Q.length;var l=RA(4+U+1),t=l+4;if(i[l>>2]=U,F&&B)((A,Q,F,U)=>{if(!(U>0))return 0;for(var B=F+U-1,l=0;l<A.length;++l){var t=A.charCodeAt(l);if(t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&A.charCodeAt(++l)),t<=127){if(F>=B)break;Q[F++]=t}else if(t<=2047){if(F+1>=B)break;Q[F++]=192|t>>6,Q[F++]=128|63&t}else if(t<=65535){if(F+2>=B)break;Q[F++]=224|t>>12,Q[F++]=128|t>>6&63,Q[F++]=128|63&t}else{if(F+3>=B)break;Q[F++]=240|t>>18,Q[F++]=128|t>>12&63,Q[F++]=128|t>>6&63,Q[F++]=128|63&t}}Q[F]=0})(Q,Z,t,U+1);else if(B)for(var n=0;n<U;++n){var d=Q.charCodeAt(n);d>255&&(IA(t),H("String has UTF-16 code units that do not fit in 8 bits")),Z[t+n]=d}else for(n=0;n<U;++n)Z[t+n]=Q[n];return null!==A&&A.push(IA,l),l},argPackAdvance:8,readValueFromPointer:K,destructorFunction(A){IA(A)}})},c:(A,Q,F)=>{var U,B,l,t;F=u(F),2===Q?(U=$,B=AA,t=QA,l=A=>a[A>>1]):4===Q&&(U=FA,B=UA,t=BA,l=A=>i[A>>2]),w(A,{name:F,fromWireType:A=>{for(var F,B=i[A>>2],t=A+4,n=0;n<=B;++n){var d=A+4+n*Q;if(n==B||0==l(d)){var R=U(t,d-t);void 0===F?F=R:(F+=String.fromCharCode(0),F+=R),t=d+Q}}return IA(A),F},toWireType:(A,U)=>{"string"!=typeof U&&H(`Cannot pass non-string to C++ string type ${F}`);var l=t(U),n=RA(4+l+Q);return i[n>>2]=l/Q,B(U,n+4,l+Q),null!==A&&A.push(IA,n),n},argPackAdvance:8,readValueFromPointer:K,destructorFunction(A){IA(A)}})},j:(A,Q)=>{w(A,{isVoid:!0,name:Q=u(Q),argPackAdvance:0,fromWireType:()=>{},toWireType:(A,Q)=>{}})},g:A=>{var Q=Z.length,F=2147483648;if((A>>>=0)>F)return!1;for(var U,B,l=1;l<=4;l*=2){var t=Q*(1+.2/l);t=Math.min(t,A+100663296);var n=Math.min(F,(U=Math.max(A,t))+((B=65536)-U%B)%B);if(lA(n))return!0}return!1}},nA=function(){var A={a:tA};function Q(A,Q){var F;return nA=A.exports,d=nA.k,s(),F=nA.l,o.unshift(F),function(A){if(b--,U.monitorRunDependencies?.(b),0==b&&r){var Q=r;r=null,Q()}}(),nA}if(b++,U.monitorRunDependencies?.(b),U.instantiateWasm)try{return U.instantiateWasm(A,Q)}catch(A){R(`Module.instantiateWasm callback failed with error: ${A}`),F(A)}return S(0,m,A,(function(A){Q(A.instance)})).catch(F),{}}();U._pack=(A,Q,F,B,l,t,n,d,R,I,e)=>(U._pack=nA.m)(A,Q,F,B,l,t,n,d,R,I,e);var dA,RA=U._malloc=A=>(RA=U._malloc=nA.o)(A),IA=U._free=A=>(IA=U._free=nA.p)(A);function eA(){function A(){dA||(dA=!0,U.calledRun=!0,W||(Y(o),Q(U),U.onRuntimeInitialized&&U.onRuntimeInitialized(),function(){if(U.postRun)for("function"==typeof U.postRun&&(U.postRun=[U.postRun]);U.postRun.length;)A=U.postRun.shift(),J.unshift(A);var A;Y(J)}()))}b>0||(function(){if(U.preRun)for("function"==typeof U.preRun&&(U.preRun=[U.preRun]);U.preRun.length;)A=U.preRun.shift(),h.unshift(A);var A;Y(h)}(),b>0||(U.setStatus?(U.setStatus("Running..."),setTimeout((function(){setTimeout((function(){U.setStatus("")}),1),A()}),1)):A()))}if(r=function A(){dA||eA(),dA||(r=A)},U.preInit)for("function"==typeof U.preInit&&(U.preInit=[U.preInit]);U.preInit.length>0;)U.preInit.pop()();return eA(),A.ready};class E{constructor(A){this.dataChanged=!1,this.transformsChanged=!1,this._updating=new Set,this._dirty=new Set;let Q=0,F=0;this._splatIndices=new Map,this._offsets=new Map;const U=new Map;for(const B of A.objects)B instanceof e&&(this._splatIndices.set(B,F),this._offsets.set(B,Q),U.set(Q,B),Q+=B.data.vertexCount,F++);this._vertexCount=Q,this._width=2048,this._height=Math.ceil(2*this.vertexCount/this.width),this._data=new Uint32Array(this.width*this.height*4),this._transformsWidth=5,this._transformsHeight=U.size,this._transforms=new Float32Array(this._transformsWidth*this._transformsHeight*4),this._transformIndicesWidth=1024,this._transformIndicesHeight=Math.ceil(this.vertexCount/this._transformIndicesWidth),this._transformIndices=new Uint32Array(this._transformIndicesWidth*this._transformIndicesHeight),this._positions=new Float32Array(3*this.vertexCount),this._rotations=new Float32Array(4*this.vertexCount),this._scales=new Float32Array(3*this.vertexCount),this._worker=new b;const B=A=>{const Q=this._splatIndices.get(A);this._transforms.set(A.transform.buffer,20*Q),this._transforms[20*Q+16]=A.selected?1:0,A.positionChanged=!1,A.rotationChanged=!1,A.scaleChanged=!1,A.selectedChanged=!1,this.transformsChanged=!0};let l;this._worker.onmessage=A=>{if(A.data.response){const Q=A.data.response,F=U.get(Q.offset);B(F);const l=this._splatIndices.get(F);for(let A=0;A<F.data.vertexCount;A++)this._transformIndices[Q.offset+A]=l;this._data.set(Q.data,8*Q.offset),F.data.reattach(Q.positions,Q.rotations,Q.scales,Q.colors,Q.selection),this._positions.set(Q.worldPositions,3*Q.offset),this._rotations.set(Q.worldRotations,4*Q.offset),this._scales.set(Q.worldScales,3*Q.offset),this._updating.delete(F),F.selectedChanged=!1,this.dataChanged=!0}},async function(){l=await r()}();const t=A=>{if(!l)return void async function(){for(;!l;)await new Promise((A=>setTimeout(A,0)))}().then((()=>{t(A)}));B(A);const Q=l._malloc(3*A.data.vertexCount*4),F=l._malloc(4*A.data.vertexCount*4),U=l._malloc(3*A.data.vertexCount*4),n=l._malloc(4*A.data.vertexCount),d=l._malloc(A.data.vertexCount),R=l._malloc(8*A.data.vertexCount*4),I=l._malloc(3*A.data.vertexCount*4),e=l._malloc(4*A.data.vertexCount*4),Z=l._malloc(3*A.data.vertexCount*4);l.HEAPF32.set(A.data.positions,Q/4),l.HEAPF32.set(A.data.rotations,F/4),l.HEAPF32.set(A.data.scales,U/4),l.HEAPU8.set(A.data.colors,n),l.HEAPU8.set(A.data.selection,d),l._pack(A.selected,A.data.vertexCount,Q,F,U,n,d,R,I,e,Z);const V=new Uint32Array(l.HEAPU32.buffer,R,8*A.data.vertexCount),a=new Float32Array(l.HEAPF32.buffer,I,3*A.data.vertexCount),g=new Float32Array(l.HEAPF32.buffer,e,4*A.data.vertexCount),i=new Float32Array(l.HEAPF32.buffer,Z,3*A.data.vertexCount),C=this._splatIndices.get(A),c=this._offsets.get(A);for(let Q=0;Q<A.data.vertexCount;Q++)this._transformIndices[c+Q]=C;this._data.set(V,8*c),this._positions.set(a,3*c),this._rotations.set(g,4*c),this._scales.set(i,3*c),l._free(Q),l._free(F),l._free(U),l._free(n),l._free(d),l._free(R),l._free(I),l._free(e),l._free(Z),this.dataChanged=!0},n=A=>{if((A.positionChanged||A.rotationChanged||A.scaleChanged||A.selectedChanged)&&B(A),!A.data.changed||A.data.detached)return;const Q={position:new Float32Array(A.position.flat()),rotation:new Float32Array(A.rotation.flat()),scale:new Float32Array(A.scale.flat()),selected:A.selected,vertexCount:A.data.vertexCount,positions:A.data.positions,rotations:A.data.rotations,scales:A.data.scales,colors:A.data.colors,selection:A.data.selection,offset:this._offsets.get(A)};this._worker.postMessage({splat:Q},[Q.position.buffer,Q.rotation.buffer,Q.scale.buffer,Q.positions.buffer,Q.rotations.buffer,Q.scales.buffer,Q.colors.buffer,Q.selection.buffer]),this._updating.add(A),A.data.detached=!0};this.getSplat=A=>{let Q=null;for(const[F,U]of this._offsets){if(!(A>=U))break;Q=F}return Q},this.getLocalIndex=(A,Q)=>Q-this._offsets.get(A),this.markDirty=A=>{this._dirty.add(A)},this.rebuild=()=>{for(const A of this._dirty)n(A);this._dirty.clear()},this.dispose=()=>{this._worker.terminate()};for(const A of this._splatIndices.keys())t(A)}get offsets(){return this._offsets}get data(){return this._data}get width(){return this._width}get height(){return this._height}get transforms(){return this._transforms}get transformsWidth(){return this._transformsWidth}get transformsHeight(){return this._transformsHeight}get transformIndices(){return this._transformIndices}get transformIndicesWidth(){return this._transformIndicesWidth}get transformIndicesHeight(){return this._transformIndicesHeight}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get vertexCount(){return this._vertexCount}get needsRebuild(){return this._dirty.size>0}get updating(){return this._updating.size>0}}class m{constructor(A=0,Q=0,F=0,U=255){this.r=A,this.g=Q,this.b=F,this.a=U}flat(){return[this.r,this.g,this.b,this.a]}flatNorm(){return[this.r/255,this.g/255,this.b/255,this.a/255]}toHexString(){return"#"+this.flat().map((A=>A.toString(16).padStart(2,"0"))).join("")}toString(){return`[${this.flat().join(", ")}]`}}class N extends J{constructor(A,Q){super(A,Q),this._outlineThickness=10,this._outlineColor=new m(255,165,0,255),this._renderData=null,this._depthIndex=new Uint32Array,this._chunks=null,this._splatTexture=null;const F=A.canvas,U=A.gl;let B,l,t,n,d,R,I,Z,V,a,g,i,C,c,W,s;this._resize=()=>{this._camera&&(this._camera.data.setSize(F.width,F.height),this._camera.update(),l=U.getUniformLocation(this.program,"projection"),U.uniformMatrix4fv(l,!1,this._camera.data.projectionMatrix.buffer),t=U.getUniformLocation(this.program,"viewport"),U.uniform2fv(t,new Float32Array([F.width,F.height])))};const h=()=>{B=new o,B.onmessage=A=>{if(A.data.depthIndex){const{depthIndex:Q,chunks:F}=A.data;this._depthIndex=Q,this._chunks=F,U.bindBuffer(U.ARRAY_BUFFER,s),U.bufferData(U.ARRAY_BUFFER,Q,U.STATIC_DRAW)}}};this._initialize=()=>{if(this._scene&&this._camera){this._resize(),this._scene.addEventListener("objectAdded",J),this._scene.addEventListener("objectRemoved",b);for(const A of this._scene.objects)A instanceof e&&A.addEventListener("objectChanged",r);this._renderData=new E(this._scene),n=U.getUniformLocation(this.program,"focal"),U.uniform2fv(n,new Float32Array([this._camera.data.fx,this._camera.data.fy])),d=U.getUniformLocation(this.program,"view"),U.uniformMatrix4fv(d,!1,this._camera.data.viewMatrix.buffer),V=U.getUniformLocation(this.program,"outlineThickness"),U.uniform1f(V,this.outlineThickness),a=U.getUniformLocation(this.program,"outlineColor"),U.uniform4fv(a,new Float32Array(this.outlineColor.flatNorm())),this._splatTexture=U.createTexture(),R=U.getUniformLocation(this.program,"u_texture"),U.uniform1i(R,0),C=U.createTexture(),I=U.getUniformLocation(this.program,"u_transforms"),U.uniform1i(I,1),c=U.createTexture(),Z=U.getUniformLocation(this.program,"u_transformIndices"),U.uniform1i(Z,2),W=U.createBuffer(),U.bindBuffer(U.ARRAY_BUFFER,W),U.bufferData(U.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),U.STATIC_DRAW),g=U.getAttribLocation(this.program,"position"),U.enableVertexAttribArray(g),U.vertexAttribPointer(g,2,U.FLOAT,!1,0,0),s=U.createBuffer(),i=U.getAttribLocation(this.program,"index"),U.enableVertexAttribArray(i),U.bindBuffer(U.ARRAY_BUFFER,s),h()}else console.error("Cannot render without scene and camera")};const J=A=>{const Q=A;Q.object instanceof e&&Q.object.addEventListener("objectChanged",r),this.dispose()},b=A=>{const Q=A;Q.object instanceof e&&Q.object.removeEventListener("objectChanged",r),this.dispose()},r=A=>{const Q=A;Q.object instanceof e&&this._renderData&&this._renderData.markDirty(Q.object)};this._render=()=>{if(this._scene&&this._camera&&this.renderData){if(this.renderData.needsRebuild&&this.renderData.rebuild(),this.renderData.dataChanged||this.renderData.transformsChanged){this.renderData.dataChanged&&(U.activeTexture(U.TEXTURE0),U.bindTexture(U.TEXTURE_2D,this.splatTexture),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,U.NEAREST),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,U.NEAREST),U.texImage2D(U.TEXTURE_2D,0,U.RGBA32UI,this.renderData.width,this.renderData.height,0,U.RGBA_INTEGER,U.UNSIGNED_INT,this.renderData.data)),this.renderData.transformsChanged&&(U.activeTexture(U.TEXTURE1),U.bindTexture(U.TEXTURE_2D,C),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,U.NEAREST),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,U.NEAREST),U.texImage2D(U.TEXTURE_2D,0,U.RGBA32F,this.renderData.transformsWidth,this.renderData.transformsHeight,0,U.RGBA,U.FLOAT,this.renderData.transforms),U.activeTexture(U.TEXTURE2),U.bindTexture(U.TEXTURE_2D,c),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,U.NEAREST),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,U.NEAREST),U.texImage2D(U.TEXTURE_2D,0,U.R32UI,this.renderData.transformIndicesWidth,this.renderData.transformIndicesHeight,0,U.RED_INTEGER,U.UNSIGNED_INT,this.renderData.transformIndices));const A=new Float32Array(this.renderData.positions.slice().buffer),Q=new Float32Array(this.renderData.transforms.slice().buffer),F=new Uint32Array(this.renderData.transformIndices.slice().buffer);B.postMessage({sortData:{positions:A,transforms:Q,transformIndices:F,vertexCount:this.renderData.vertexCount}},[A.buffer,Q.buffer,F.buffer]),this.renderData.dataChanged=!1,this.renderData.transformsChanged=!1}this._camera.update(),B.postMessage({viewProj:this._camera.data.viewProj.buffer}),U.viewport(0,0,F.width,F.height),U.clearColor(0,0,0,0),U.clear(U.COLOR_BUFFER_BIT),U.disable(U.DEPTH_TEST),U.enable(U.BLEND),U.blendFuncSeparate(U.ONE_MINUS_DST_ALPHA,U.ONE,U.ONE_MINUS_DST_ALPHA,U.ONE),U.blendEquationSeparate(U.FUNC_ADD,U.FUNC_ADD),U.uniformMatrix4fv(l,!1,this._camera.data.projectionMatrix.buffer),U.uniformMatrix4fv(d,!1,this._camera.data.viewMatrix.buffer),U.bindBuffer(U.ARRAY_BUFFER,W),U.vertexAttribPointer(g,2,U.FLOAT,!1,0,0),U.bindBuffer(U.ARRAY_BUFFER,s),U.bufferData(U.ARRAY_BUFFER,this.depthIndex,U.STATIC_DRAW),U.vertexAttribIPointer(i,1,U.INT,0,0),U.vertexAttribDivisor(i,1),U.drawArraysInstanced(U.TRIANGLE_FAN,0,4,this.renderData.vertexCount)}else console.error("Cannot render without scene and camera")},this._dispose=()=>{if(this._scene&&this._camera&&this.renderData){this._scene.removeEventListener("objectAdded",J),this._scene.removeEventListener("objectRemoved",b);for(const A of this._scene.objects)A instanceof e&&A.removeEventListener("objectChanged",r);B.terminate(),this.renderData.dispose(),U.deleteTexture(this.splatTexture),U.deleteTexture(C),U.deleteTexture(c),U.deleteBuffer(s),U.deleteBuffer(W)}else console.error("Cannot dispose without scene and camera")},this._setOutlineThickness=A=>{this._outlineThickness=A,this._initialized&&U.uniform1f(V,A)},this._setOutlineColor=A=>{this._outlineColor=A,this._initialized&&U.uniform4fv(a,new Float32Array(A.flatNorm()))}}get renderData(){return this._renderData}get depthIndex(){return this._depthIndex}get chunks(){return this._chunks}get splatTexture(){return this._splatTexture}get outlineThickness(){return this._outlineThickness}set outlineThickness(A){this._setOutlineThickness(A)}get outlineColor(){return this._outlineColor}set outlineColor(A){this._setOutlineColor(A)}_getVertexSource(){return"#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform highp sampler2D u_transforms;\nuniform highp usampler2D u_transformIndices;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool useDepthFade;\nuniform float depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\nout float vSize;\nout float vSelected;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    float selected = float((cen.w >> 24) & 0xffu);\n\n    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 transform = mat4(\n        texelFetch(u_transforms, ivec2(0, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(1, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(2, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(3, transformIndex), 0)\n    );\n\n    if (selected < 0.5) {\n        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;\n    }\n\n    mat4 viewTransform = view * transform;\n\n    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.z > pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(viewTransform)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if (lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    vColor = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vPosition = position;\n    vSize = length(majorAxis);\n    vSelected = selected;\n\n    float scalingFactor = 1.0;\n\n    if (useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport\n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n}\n"}_getFragmentSource(){return"#version 300 es\nprecision highp float;\n\nuniform float outlineThickness;\nuniform vec4 outlineColor;\n\nin vec4 vColor;\nin vec2 vPosition;\nin float vSize;\nin float vSelected;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n\n    if (A < -4.0) discard;\n\n    if (vSelected < 0.5) {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n        return;\n    }\n\n    float outlineThreshold = -4.0 + (outlineThickness / vSize);\n\n    if (A < outlineThreshold) {\n        fragColor = outlineColor;\n    } \n    else {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n    }\n}\n"}}class G{constructor(A=1){let Q,F,U,B,l=0,t=!1;this.initialize=A=>{if(!(A instanceof N))throw new Error("FadeInPass requires a RenderProgram");l=A.started?1:0,t=!0,Q=A,F=A.renderer.gl,U=F.getUniformLocation(Q.program,"useDepthFade"),F.uniform1i(U,1),B=F.getUniformLocation(Q.program,"depthFade"),F.uniform1f(B,l)},this.render=()=>{var n;t&&!(null===(n=Q.renderData)||void 0===n?void 0:n.updating)&&(F.useProgram(Q.program),l=Math.min(l+.01*A,1),l>=1&&(t=!1,F.uniform1i(U,0)),F.uniform1f(B,l))}}dispose(){}}class y{constructor(A=null,Q=null){this._backgroundColor=new m;const F=A||document.createElement("canvas");A||(F.style.display="block",F.style.boxSizing="border-box",F.style.width="100%",F.style.height="100%",F.style.margin="0",F.style.padding="0",document.body.appendChild(F)),F.style.background=this._backgroundColor.toHexString(),this._canvas=F,this._gl=F.getContext("webgl2",{antialias:!1});const U=Q||[];Q||U.push(new G),this._renderProgram=new N(this,U);const B=[this._renderProgram];this.resize=()=>{const A=F.clientWidth,Q=F.clientHeight;F.width===A&&F.height===Q||this.setSize(A,Q)},this.setSize=(A,Q)=>{F.width=A,F.height=Q,this._gl.viewport(0,0,F.width,F.height);for(const A of B)A.resize()},this.render=(A,Q)=>{for(const F of B)F.render(A,Q)},this.dispose=()=>{for(const A of B)A.dispose()},this.addProgram=A=>{B.push(A)},this.removeProgram=A=>{const Q=B.indexOf(A);if(Q<0)throw new Error("Program not found");B.splice(Q,1)},this.resize()}get canvas(){return this._canvas}get gl(){return this._gl}get renderProgram(){return this._renderProgram}get backgroundColor(){return this._backgroundColor}set backgroundColor(A){this._backgroundColor=A,this._canvas.style.background=A.toHexString()}}class X{constructor(F,U,B=.5,l=.5,t=5,n=!0,R=new A){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{};let I=R.clone(),e=I.clone(),Z=B,V=l,a=t,g=!1,i=!1,C=0,c=0,W=0;this.autoRotate=!1,this.autoRotateSpeed=.01;const s={};let h=!1;F.addEventListener("objectChanged",(()=>{if(h)return;const Q=F.rotation.toEuler();Z=-Q.y,V=-Q.x;const U=F.position.x-a*Math.sin(Z)*Math.cos(V),B=F.position.y+a*Math.sin(V),l=F.position.z+a*Math.cos(Z)*Math.cos(V);e=new A(U,B,l)})),this.setCameraTarget=Q=>{const U=Q.x-F.position.x,B=Q.y-F.position.y,l=Q.z-F.position.z;a=Math.sqrt(U*U+B*B+l*l),V=Math.atan2(B,Math.sqrt(U*U+l*l)),Z=-Math.atan2(U,l),e=new A(Q.x,Q.y,Q.z)};const o=()=>.1+.9*(a-this.minZoom)/(this.maxZoom-this.minZoom),J=A=>{s[A.code]=!0,"ArrowUp"===A.code&&(s.KeyW=!0),"ArrowDown"===A.code&&(s.KeyS=!0),"ArrowLeft"===A.code&&(s.KeyA=!0),"ArrowRight"===A.code&&(s.KeyD=!0)},b=A=>{s[A.code]=!1,"ArrowUp"===A.code&&(s.KeyW=!1),"ArrowDown"===A.code&&(s.KeyS=!1),"ArrowLeft"===A.code&&(s.KeyA=!1),"ArrowRight"===A.code&&(s.KeyD=!1)},r=A=>{Y(A),g=!0,i=2===A.button,c=A.clientX,W=A.clientY,window.addEventListener("mouseup",E),this.autoRotate=!1},E=A=>{Y(A),g=!1,i=!1,window.removeEventListener("mouseup",E),this.autoRotate=!0},m=Q=>{if(Y(Q),!g||!F)return;const U=Q.clientX-c,B=Q.clientY-W;if(i){const Q=o(),l=-U*this.panSpeed*.01*Q,t=-B*this.panSpeed*.01*Q,n=d.RotationFromQuaternion(F.rotation).buffer,R=new A(n[0],n[3],n[6]),I=new A(n[1],n[4],n[7]);e=e.add(R.multiply(l)),e=e.add(I.multiply(t))}else Z-=U*this.orbitSpeed*.003,V+=B*this.orbitSpeed*.003,V=Math.min(Math.max(V,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);c=Q.clientX,W=Q.clientY},N=A=>{Y(A);const Q=o();a+=A.deltaY*this.zoomSpeed*.025*Q,a=Math.min(Math.max(a,this.minZoom),this.maxZoom)},G=A=>{if(Y(A),1===A.touches.length)g=!0,i=!1,c=A.touches[0].clientX,W=A.touches[0].clientY,C=0;else if(2===A.touches.length){g=!0,i=!0,c=(A.touches[0].clientX+A.touches[1].clientX)/2,W=(A.touches[0].clientY+A.touches[1].clientY)/2;const Q=A.touches[0].clientX-A.touches[1].clientX,F=A.touches[0].clientY-A.touches[1].clientY;C=Math.sqrt(Q*Q+F*F)}this.autoRotate=!1},y=A=>{Y(A),g=!1,i=!1,this.autoRotate=!0},X=Q=>{if(Y(Q),g&&F)if(i){const U=o(),B=Q.touches[0].clientX-Q.touches[1].clientX,l=Q.touches[0].clientY-Q.touches[1].clientY,t=Math.sqrt(B*B+l*l);a+=(C-t)*this.zoomSpeed*.1*U,a=Math.min(Math.max(a,this.minZoom),this.maxZoom),C=t;const n=(Q.touches[0].clientX+Q.touches[1].clientX)/2,R=(Q.touches[0].clientY+Q.touches[1].clientY)/2,I=n-c,Z=R-W,V=d.RotationFromQuaternion(F.rotation).buffer,g=new A(V[0],V[3],V[6]),i=new A(V[1],V[4],V[7]);e=e.add(g.multiply(-I*this.panSpeed*.025*U)),e=e.add(i.multiply(-Z*this.panSpeed*.025*U)),c=n,W=R}else{const A=Q.touches[0].clientX-c,F=Q.touches[0].clientY-W;Z-=A*this.orbitSpeed*.003,V+=F*this.orbitSpeed*.003,V=Math.min(Math.max(V,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),c=Q.touches[0].clientX,W=Q.touches[0].clientY}},S=(A,Q,F)=>(1-F)*A+F*Q;this.update=()=>{h=!0,B=S(B,Z,this.dampening),l=S(l,V,this.dampening),t=S(t,a,this.dampening),I=I.lerp(e,this.dampening);const U=I.x+t*Math.sin(B)*Math.cos(l),n=I.y-t*Math.sin(l),R=I.z-t*Math.cos(B)*Math.cos(l);F.position=new A(U,n,R);const g=I.subtract(F.position).normalize(),i=Math.asin(-g.y),C=Math.atan2(g.x,g.z);F.rotation=Q.FromEuler(new A(i,C,0));const c=.025,W=.01,o=d.RotationFromQuaternion(F.rotation).buffer,J=new A(-o[2],-o[5],-o[8]),b=new A(o[0],o[3],o[6]);s.KeyS&&(e=e.add(J.multiply(c))),s.KeyW&&(e=e.subtract(J.multiply(c))),s.KeyA&&(e=e.subtract(b.multiply(c))),s.KeyD&&(e=e.add(b.multiply(c))),this.autoRotate&&(Z+=this.autoRotateSpeed),s.KeyE&&(Z+=W),s.KeyQ&&(Z-=W),s.KeyR&&(V+=W),s.KeyF&&(V-=W),h=!1};const Y=A=>{A.preventDefault(),A.stopPropagation()};this.dispose=()=>{U.removeEventListener("dragenter",Y),U.removeEventListener("dragover",Y),U.removeEventListener("dragleave",Y),U.removeEventListener("contextmenu",Y),U.removeEventListener("mousedown",r),U.removeEventListener("mousemove",m),U.removeEventListener("wheel",N),U.removeEventListener("touchstart",G),U.removeEventListener("touchend",y),U.removeEventListener("touchmove",X),n&&(window.removeEventListener("keydown",J),window.removeEventListener("keyup",b))},n&&(window.addEventListener("keydown",J),window.addEventListener("keyup",b)),U.addEventListener("dragenter",Y),U.addEventListener("dragover",Y),U.addEventListener("dragleave",Y),U.addEventListener("contextmenu",Y),U.addEventListener("mousedown",r),U.addEventListener("mousemove",m),U.addEventListener("wheel",N),U.addEventListener("touchstart",G),U.addEventListener("touchend",y),U.addEventListener("touchmove",X),this.update()}}class S{constructor(A,Q){this.normal=A,this.point=Q}intersect(A,Q){const F=this.normal.dot(Q);if(Math.abs(F)<1e-4)return null;const U=this.normal.dot(this.point.subtract(A))/F;return U<0?null:A.add(Q.multiply(U))}}class Y{initialize(A){}render(){}dispose(){}}var p=function(A={}){var Q,F,U=A;U.ready=new Promise(((A,U)=>{Q=A,F=U}));var B=Object.assign({},U),l="";"undefined"!=typeof document&&document.currentScript&&(l=document.currentScript.src),l=l.startsWith("blob:")?"":l.substr(0,l.replace(/[?#].*/,"").lastIndexOf("/")+1),U.print||console.log.bind(console);var t,n,d=U.printErr||console.error.bind(console);function R(A){if(G(A))return function(A){for(var Q=atob(A),F=new Uint8Array(Q.length),U=0;U<Q.length;++U)F[U]=Q.charCodeAt(U);return F}(A.slice(N.length))}Object.assign(U,B),B=null,U.arguments&&U.arguments,U.thisProgram&&U.thisProgram,U.quit&&U.quit,U.wasmBinary&&(t=U.wasmBinary),"object"!=typeof WebAssembly&&r("no native wasm support detected");var I,e,Z,V,a,g,i,C,c=!1;function W(){var A=n.buffer;U.HEAP8=I=new Int8Array(A),U.HEAP16=Z=new Int16Array(A),U.HEAPU8=e=new Uint8Array(A),U.HEAPU16=V=new Uint16Array(A),U.HEAP32=a=new Int32Array(A),U.HEAPU32=g=new Uint32Array(A),U.HEAPF32=i=new Float32Array(A),U.HEAPF64=C=new Float64Array(A)}var s=[],h=[],o=[],J=0,b=null;function r(A){U.onAbort?.(A),d(A="Aborted("+A+")"),c=!0,A+=". Build with -sASSERTIONS for more info.";var Q=new WebAssembly.RuntimeError(A);throw F(Q),Q}var E,m,N="data:application/octet-stream;base64,",G=A=>A.startsWith(N);function y(A){return Promise.resolve().then((()=>function(A){if(A==E&&t)return new Uint8Array(t);var Q=R(A);if(Q)return Q;throw"both async and sync fetching of the wasm failed"}(A)))}function X(A,Q,F,U){return function(A,Q,F){return y(A).then((A=>WebAssembly.instantiate(A,Q))).then(F,(A=>{d(`failed to asynchronously prepare wasm: ${A}`),r(A)}))}(Q,F,U)}G(E="data:application/octet-stream;base64,")||(m=E,E=U.locateFile?U.locateFile(m,l):l+m);var S=A=>{for(;A.length>0;)A.shift()(U)};U.noExitRuntime;var Y,p,k=A=>{for(var Q="",F=A;e[F];)Q+=Y[e[F++]];return Q},u={},T={},D=A=>{throw new p(A)};function H(A,Q,F={}){if(!("argPackAdvance"in Q))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(A,Q,F={}){var U=Q.name;if(A||D(`type "${U}" must have a positive integer typeid pointer`),T.hasOwnProperty(A)){if(F.ignoreDuplicateRegistrations)return;D(`Cannot register type '${U}' twice`)}if(T[A]=Q,u.hasOwnProperty(A)){var B=u[A];delete u[A],B.forEach((A=>A()))}}(A,Q,F)}var w=[],f=[],x=()=>f.length/2-5-w.length,M=A=>(A||D("Cannot use deleted val. handle = "+A),f[A]),v=A=>{switch(A){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:{const Q=w.pop()||f.length;return f[Q]=A,f[Q+1]=1,Q}}};function z(A){return this.fromWireType(g[A>>2])}var K={name:"emscripten::val",fromWireType:A=>{var Q=M(A);return(A=>{A>9&&0==--f[A+1]&&(f[A]=void 0,w.push(A))})(A),Q},toWireType:(A,Q)=>v(Q),argPackAdvance:8,readValueFromPointer:z,destructorFunction:null},j=(A,Q)=>{switch(Q){case 4:return function(A){return this.fromWireType(i[A>>2])};case 8:return function(A){return this.fromWireType(C[A>>3])};default:throw new TypeError(`invalid float width (${Q}): ${A}`)}},O=(A,Q,F)=>{switch(Q){case 1:return F?A=>I[A]:A=>e[A];case 2:return F?A=>Z[A>>1]:A=>V[A>>1];case 4:return F?A=>a[A>>2]:A=>g[A>>2];default:throw new TypeError(`invalid integer width (${Q}): ${A}`)}},L="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,P=(A,Q)=>A?((A,Q,F)=>{for(var U=Q+F,B=Q;A[B]&&!(B>=U);)++B;if(B-Q>16&&A.buffer&&L)return L.decode(A.subarray(Q,B));for(var l="";Q<B;){var t=A[Q++];if(128&t){var n=63&A[Q++];if(192!=(224&t)){var d=63&A[Q++];if((t=224==(240&t)?(15&t)<<12|n<<6|d:(7&t)<<18|n<<12|d<<6|63&A[Q++])<65536)l+=String.fromCharCode(t);else{var R=t-65536;l+=String.fromCharCode(55296|R>>10,56320|1023&R)}}else l+=String.fromCharCode((31&t)<<6|n)}else l+=String.fromCharCode(t)}return l})(e,A,Q):"",_="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,q=(A,Q)=>{for(var F=A,U=F>>1,B=U+Q/2;!(U>=B)&&V[U];)++U;if((F=U<<1)-A>32&&_)return _.decode(e.subarray(A,F));for(var l="",t=0;!(t>=Q/2);++t){var n=Z[A+2*t>>1];if(0==n)break;l+=String.fromCharCode(n)}return l},$=(A,Q,F)=>{if(F??=2147483647,F<2)return 0;for(var U=Q,B=(F-=2)<2*A.length?F/2:A.length,l=0;l<B;++l){var t=A.charCodeAt(l);Z[Q>>1]=t,Q+=2}return Z[Q>>1]=0,Q-U},AA=A=>2*A.length,QA=(A,Q)=>{for(var F=0,U="";!(F>=Q/4);){var B=a[A+4*F>>2];if(0==B)break;if(++F,B>=65536){var l=B-65536;U+=String.fromCharCode(55296|l>>10,56320|1023&l)}else U+=String.fromCharCode(B)}return U},FA=(A,Q,F)=>{if(F??=2147483647,F<4)return 0;for(var U=Q,B=U+F-4,l=0;l<A.length;++l){var t=A.charCodeAt(l);if(t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&A.charCodeAt(++l)),a[Q>>2]=t,(Q+=4)+4>B)break}return a[Q>>2]=0,Q-U},UA=A=>{for(var Q=0,F=0;F<A.length;++F){var U=A.charCodeAt(F);U>=55296&&U<=57343&&++F,Q+=4}return Q},BA=A=>{var Q=(A-n.buffer.byteLength+65535)/65536;try{return n.grow(Q),W(),1}catch(A){}};(()=>{for(var A=new Array(256),Q=0;Q<256;++Q)A[Q]=String.fromCharCode(Q);Y=A})(),p=U.BindingError=class extends Error{constructor(A){super(A),this.name="BindingError"}},U.InternalError=class extends Error{constructor(A){super(A),this.name="InternalError"}},f.push(0,1,void 0,1,null,1,!0,1,!1,1),U.count_emval_handles=x;var lA={f:(A,Q,F,U,B)=>{},i:(A,Q,F,U)=>{H(A,{name:Q=k(Q),fromWireType:function(A){return!!A},toWireType:function(A,Q){return Q?F:U},argPackAdvance:8,readValueFromPointer:function(A){return this.fromWireType(e[A])},destructorFunction:null})},h:A=>H(A,K),e:(A,Q,F)=>{H(A,{name:Q=k(Q),fromWireType:A=>A,toWireType:(A,Q)=>Q,argPackAdvance:8,readValueFromPointer:j(Q,F),destructorFunction:null})},b:(A,Q,F,U,B)=>{Q=k(Q);var l=A=>A;if(0===U){var t=32-8*F;l=A=>A<<t>>>t}var n=Q.includes("unsigned");H(A,{name:Q,fromWireType:l,toWireType:n?function(A,Q){return this.name,Q>>>0}:function(A,Q){return this.name,Q},argPackAdvance:8,readValueFromPointer:O(Q,F,0!==U),destructorFunction:null})},a:(A,Q,F)=>{var U=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][Q];function B(A){var Q=g[A>>2],F=g[A+4>>2];return new U(I.buffer,F,Q)}H(A,{name:F=k(F),fromWireType:B,argPackAdvance:8,readValueFromPointer:B},{ignoreDuplicateRegistrations:!0})},d:(A,Q)=>{var F="std::string"===(Q=k(Q));H(A,{name:Q,fromWireType(A){var Q,U=g[A>>2],B=A+4;if(F)for(var l=B,t=0;t<=U;++t){var n=B+t;if(t==U||0==e[n]){var d=P(l,n-l);void 0===Q?Q=d:(Q+=String.fromCharCode(0),Q+=d),l=n+1}}else{var R=new Array(U);for(t=0;t<U;++t)R[t]=String.fromCharCode(e[B+t]);Q=R.join("")}return RA(A),Q},toWireType(A,Q){var U;Q instanceof ArrayBuffer&&(Q=new Uint8Array(Q));var B="string"==typeof Q;B||Q instanceof Uint8Array||Q instanceof Uint8ClampedArray||Q instanceof Int8Array||D("Cannot pass non-string to std::string"),U=F&&B?(A=>{for(var Q=0,F=0;F<A.length;++F){var U=A.charCodeAt(F);U<=127?Q++:U<=2047?Q+=2:U>=55296&&U<=57343?(Q+=4,++F):Q+=3}return Q})(Q):Q.length;var l=dA(4+U+1),t=l+4;if(g[l>>2]=U,F&&B)((A,Q,F,U)=>{if(!(U>0))return 0;for(var B=F+U-1,l=0;l<A.length;++l){var t=A.charCodeAt(l);if(t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&A.charCodeAt(++l)),t<=127){if(F>=B)break;Q[F++]=t}else if(t<=2047){if(F+1>=B)break;Q[F++]=192|t>>6,Q[F++]=128|63&t}else if(t<=65535){if(F+2>=B)break;Q[F++]=224|t>>12,Q[F++]=128|t>>6&63,Q[F++]=128|63&t}else{if(F+3>=B)break;Q[F++]=240|t>>18,Q[F++]=128|t>>12&63,Q[F++]=128|t>>6&63,Q[F++]=128|63&t}}Q[F]=0})(Q,e,t,U+1);else if(B)for(var n=0;n<U;++n){var d=Q.charCodeAt(n);d>255&&(RA(t),D("String has UTF-16 code units that do not fit in 8 bits")),e[t+n]=d}else for(n=0;n<U;++n)e[t+n]=Q[n];return null!==A&&A.push(RA,l),l},argPackAdvance:8,readValueFromPointer:z,destructorFunction(A){RA(A)}})},c:(A,Q,F)=>{var U,B,l,t;F=k(F),2===Q?(U=q,B=$,t=AA,l=A=>V[A>>1]):4===Q&&(U=QA,B=FA,t=UA,l=A=>g[A>>2]),H(A,{name:F,fromWireType:A=>{for(var F,B=g[A>>2],t=A+4,n=0;n<=B;++n){var d=A+4+n*Q;if(n==B||0==l(d)){var R=U(t,d-t);void 0===F?F=R:(F+=String.fromCharCode(0),F+=R),t=d+Q}}return RA(A),F},toWireType:(A,U)=>{"string"!=typeof U&&D(`Cannot pass non-string to C++ string type ${F}`);var l=t(U),n=dA(4+l+Q);return g[n>>2]=l/Q,B(U,n+4,l+Q),null!==A&&A.push(RA,n),n},argPackAdvance:8,readValueFromPointer:z,destructorFunction(A){RA(A)}})},j:(A,Q)=>{H(A,{isVoid:!0,name:Q=k(Q),argPackAdvance:0,fromWireType:()=>{},toWireType:(A,Q)=>{}})},g:A=>{var Q=e.length,F=2147483648;if((A>>>=0)>F)return!1;for(var U,B,l=1;l<=4;l*=2){var t=Q*(1+.2/l);t=Math.min(t,A+100663296);var n=Math.min(F,(U=Math.max(A,t))+((B=65536)-U%B)%B);if(BA(n))return!0}return!1}},tA=function(){var A={a:lA};function Q(A,Q){var F;return tA=A.exports,n=tA.k,W(),F=tA.l,h.unshift(F),function(A){if(J--,U.monitorRunDependencies?.(J),0==J&&b){var Q=b;b=null,Q()}}(),tA}if(J++,U.monitorRunDependencies?.(J),U.instantiateWasm)try{return U.instantiateWasm(A,Q)}catch(A){d(`Module.instantiateWasm callback failed with error: ${A}`),F(A)}return X(0,E,A,(function(A){Q(A.instance)})).catch(F),{}}();U._evaluate=(A,Q,F,B,l,t,n,d,R,I,e,Z,V)=>(U._evaluate=tA.m)(A,Q,F,B,l,t,n,d,R,I,e,Z,V);var nA,dA=U._malloc=A=>(dA=U._malloc=tA.o)(A),RA=U._free=A=>(RA=U._free=tA.p)(A);function IA(){function A(){nA||(nA=!0,U.calledRun=!0,c||(S(h),Q(U),U.onRuntimeInitialized&&U.onRuntimeInitialized(),function(){if(U.postRun)for("function"==typeof U.postRun&&(U.postRun=[U.postRun]);U.postRun.length;)A=U.postRun.shift(),o.unshift(A);var A;S(o)}()))}J>0||(function(){if(U.preRun)for("function"==typeof U.preRun&&(U.preRun=[U.preRun]);U.preRun.length;)A=U.preRun.shift(),s.unshift(A);var A;S(s)}(),J>0||(U.setStatus?(U.setStatus("Running..."),setTimeout((function(){setTimeout((function(){U.setStatus("")}),1),A()}),1)):A()))}if(b=function A(){nA||IA(),nA||(b=A)},U.preInit)for("function"==typeof U.preInit&&(U.preInit=[U.preInit]);U.preInit.length>0;)U.preInit.pop()();return IA(),A.ready};class k{constructor(A){let Q;(async()=>{Q=await p()})();let F,U,B,l,t,n,d,R,I,e,Z,V=0,a=0;this.testPoint=(g,i)=>{if(!Q)throw new Error("Wasm module not loaded");if(!A.camera)throw new Error("Camera not set");if(!A.renderData||!A.depthIndex||!A.chunks)return null;const C=A.renderData,c=A.depthIndex,W=A.chunks,s=Math.pow(2,Math.ceil(Math.log2(C.vertexCount)));var h;(h=s)>V&&(V>0&&(Q._free(F),Q._free(B),Q._free(l),Q._free(t),Q._free(n),Q._free(d),Q._free(R),Q._free(I),Q._free(e),Q._free(Z)),V=h,F=Q._malloc(64),B=Q._malloc(4*V),l=Q._malloc(3*V*4),t=Q._malloc(4*V*4),n=Q._malloc(3*V*4),d=Q._malloc(4*V),R=Q._malloc(V),I=Q._malloc(12),e=Q._malloc(12),Z=Q._malloc(4));const o=Math.pow(2,Math.ceil(Math.log2(C.transforms.length/20)));var J;(J=o)>a&&(a>0&&Q._free(U),a=J,U=Q._malloc(20*a*4));const b=(g+1)/2,r=(i+1)/2,E=Math.floor(15*b)+15*Math.floor(15*r),m=A.camera,N=m.screenPointToRay(g,i);Q.HEAPF32.set(m.data.viewMatrix.buffer,F/4),Q.HEAPU32.set(C.transformIndices,B/4),Q.HEAPF32.set(C.positions,l/4),Q.HEAPF32.set(C.rotations,t/4),Q.HEAPF32.set(C.scales,n/4),Q.HEAPU32.set(c,d/4),Q.HEAPU8.set(W,R),Q.HEAPF32.set(m.position.flat(),I/4),Q.HEAPF32.set(N.flat(),e/4),Q.HEAPF32.set(C.transforms,U/4),Q._evaluate(F,U,B,l,t,n,d,R,C.vertexCount,E,I,e,Z);const G=Q.HEAPU32[Z/4];if(4294967295!==G){return C.getSplat(G)}return null}}}export{a as Camera,Z as CameraData,m as Color32,G as FadeInPass,k as IntersectionTester,c as Loader,d as Matrix3,U as Matrix4,n as Object3D,X as OrbitControls,W as PLYLoader,S as Plane,Q as Quaternion,E as RenderData,N as RenderProgram,g as Scene,Y as ShaderPass,J as ShaderProgram,e as Splat,R as SplatData,A as Vector3,V as Vector4,y as WebGLRenderer};
//# sourceMappingURL=index.js.map
